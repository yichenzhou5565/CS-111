NAME: Yichen Zhou
EMAIL: yichenzhou@g.ucla.edu
ID: 205140928

Included Files:
README: What you are reading now
	General description on this project
lab1a.c: Source file
Makefile: For compilation, distribution, cleaning up


Researches:
termios:
http://man7.org/linux/man-pages/man3/termios.3.html
int tcgetattr(int fd, struct termios *termios_p);
     gets the parameter associated w/ objects referred
     by fd, store them in the termios tructure referenced
     by termios_p
int tcsetattr(int fd, int optional_actions, const struct termios* termios_p); 
     sets the parameters associated w/ the terminal from
     the termios structure referred to by termios_p
TCSCANOW: change occurs immediately

<cr> and <lf>: Appears in spec several times
https://stackoverflow.com/questions/1552749/ 
difference-between-cr-lf-lf-and-cr-line-break-types

int poll(struct pollfd *fds, nfds_t nfds, int timeout);
waits for one of the file descriptor to become ready to perform I/O
struct pollfd{
       int fd; //file descriptor
       short events; //required events
       short revents; //returned events
}
POLLIN: There is data to read
POLLOUT: Writing is now possible, but can be blocked
POLLERR: Error condition
POLLHUP: Hang up
Return positive upon success, 0 when timed out, 
negative on failure
referenced from: http://man7.org/linux/man-pages/man2/poll.2.html

I also referenced a poll example:
https://stackoverflow.com/questions/12444679/why-is-this-message-
	not-only-displayed-when-a-file-is-written-to-using-the-poll

int pipe(int fds[2]);
https://www.geeksforgeeks.org/pipe-system-call/
Pipe is a connection between two processes, such that
the std output of one process becomes the std input
of another process
fd[0] will be the fd for the read end of the pipe
fd[1] will be the fd for the write end of the pipe
Returns 0 on success, -1 on error

int kill(pid_t pid, int sig);
http://man7.org/linux/man-pages/man2/kill.2.html
Returns 0 on success, -1 for failure and set errno
if pid==0, sig is sent to every process in the process
group of the calling process

Redirection:
https://www.tldp.org/LDP/lpg/node11.html

To handle error of fork() system call, I checked the return
values of fork:
https://www.geeksforgeeks.org/fork-system-call/

exec command in Linux:
https://www.geeksforgeeks.org/exec-command-in-linux-with-examples/
execute a command from the bash itself. This command does NOT
create a new process. It just replaces the bash with the command
to be executed.

exec() family in C:
https://linuxhint.com/exec_linux_system_call_c/
int execv(const char* path, char *const argv[]);
int exevp(const char* path, char *const argv[]);
The second does not require path to be the full path.

I also referenced the example in pipe():
https://www.geeksforgeeks.org/c-program-demonstrate-fork-and-pipe/

int dup2(int oldfd, int newfd);
Works just like dup, but will let user decide which file
descriptor to use.

I referenced an example in poll():
https://github.com/raoulmillais/linux-system-programming
	/blob/master/src/poll-example.c

pid_t wait(pid_t pid, int* status, int options);
https://linux.die.net/man/2/waitpid
Used for state changes in a child of the calling process
WEXITSTATUS: return the exit status of the child
WIFSIGNALED: return true if child process terminated by signal
WIFEXTED: return true if children terminated normally
	  i.e.: exit(3) or exit(2) or return from main()

Limitations:

Features:

Testing Methodology:

Several Subtleties:
memset()
need this to reset the buffer before the next execution of
read() and write(). Otherwise, the program will die when
the first character is entered in the terminal
referenced from: 
https://stackoverflow.com/questions/1559487/how-to-empty-a-char-array

atexit()
Registers the given function to be called at normal process
termination. This guarantees the terminal status been resumed
into the normal canonical mode.
referenced from:
http://man7.org/linux/man-pages/man3/atexit.3.html